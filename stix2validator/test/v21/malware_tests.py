import copy
import json

from . import ValidatorTest
from ... import validate_parsed_json, validate_string

VALID_MALWARE = u"""
{
  "type": "malware",
  "spec_version": "2.1",
  "id": "malware--0c7b5b88-8ff7-4a4d-aa9d-feb398cd0061",
  "is_family" : true,
  "created": "2016-05-12T08:17:27.000Z",
  "modified": "2016-05-12T08:17:27.000Z",
  "name": "Cryptolocker",
  "description": "...",
  "malware_types": ["ransomware"]
}
"""


class MalwareTestCases(ValidatorTest):
    valid_malware = json.loads(VALID_MALWARE)

    def test_wellformed_malware(self):
        results = validate_string(VALID_MALWARE, self.options)
        self.assertTrue(results.is_valid)

    def test_vocab_malware_label(self):
        malware = copy.deepcopy(self.valid_malware)
        malware['malware_types'] += "something"
        results = validate_parsed_json(malware, self.options)
        self.assertEqual(results.is_valid, False)

        self.check_ignore(malware, 'malware-types')

    def test_open_vocab_format_uppercase(self):
        malware = copy.deepcopy(self.valid_malware)
        malware['malware_types'] += "Ransomware"
        self.assertFalseWithOptions(malware,
                                    disabled='malware-types')

    def test_open_vocab_format_underscore(self):
        malware = copy.deepcopy(self.valid_malware)
        malware['malware_types'] += "ransom_ware"
        self.assertFalseWithOptions(malware,
                                    disabled='malware-types')

    def test_open_vocab_format_space(self):
        malware = copy.deepcopy(self.valid_malware)
        malware['malware_types'] += "ransom ware"
        self.assertFalseWithOptions(malware,
                                    disabled='malware-types')
